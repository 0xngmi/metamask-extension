diff --git a/node_modules/eth-trezor-keyring/index.js b/node_modules/eth-trezor-keyring/index.js
index 9b76a29..88a0ddf 100644
--- a/node_modules/eth-trezor-keyring/index.js
+++ b/node_modules/eth-trezor-keyring/index.js
@@ -60,12 +60,28 @@ class TrezorKeyring extends EventEmitter {
     this.paths = {};
     this.deserialize(opts);
 
+    if(!opts.delayInit){
+      this.init();
+    }
+  }
+
+  async init(){
     TrezorConnect.on('DEVICE_EVENT', (event) => {
       if (event && event.payload && event.payload.features) {
         this.model = event.payload.features.model;
       }
     });
-    TrezorConnect.init({ manifest: TREZOR_CONNECT_MANIFEST });
+
+
+    try {
+      const res = await TrezorConnect.manifest(TREZOR_CONNECT_MANIFEST);
+
+      console.log('TrezorConnect.init', res);
+
+      return res;
+    } catch (e) {
+      console.error('Issued encountered setting manifest', e);
+    }
   }
 
   /**
@@ -100,7 +116,10 @@ class TrezorKeyring extends EventEmitter {
     this.hdPath = opts.hdPath || hdPathString;
     this.accounts = opts.accounts || [];
     this.page = opts.page || 0;
+    this.paths = opts.paths || {};
     this.perPage = opts.perPage || 5;
+    this.unlockedAccount = opts.unlockedAccount || 0;
+
     return Promise.resolve();
   }
 
@@ -110,6 +129,7 @@ class TrezorKeyring extends EventEmitter {
 
   unlock() {
     if (this.isUnlocked()) {
+      console.log('TrezorKeyring - Trezor is already unlocked');
       return Promise.resolve('already unlocked');
     }
     return new Promise((resolve, reject) => {
@@ -121,6 +141,7 @@ class TrezorKeyring extends EventEmitter {
           if (response.success) {
             this.hdk.publicKey = Buffer.from(response.payload.publicKey, 'hex');
             this.hdk.chainCode = Buffer.from(response.payload.chainCode, 'hex');
+            console.log('TrezorKeyring - Unlocked keyring successfully');
             resolve('just unlocked');
           } else {
             reject(
@@ -348,6 +369,8 @@ class TrezorKeyring extends EventEmitter {
     return new Promise((resolve, reject) => {
       this.unlock()
         .then((status) => {
+          console.log('trezor unlocked', status);
+
           setTimeout(
             (_) => {
               TrezorConnect.ethereumSignMessage({
@@ -386,6 +409,8 @@ class TrezorKeyring extends EventEmitter {
           );
         })
         .catch((e) => {
+          console.error('trezor not unlocked', e);
+
           reject(new Error((e && e.toString()) || 'Unknown error'));
         });
     });
