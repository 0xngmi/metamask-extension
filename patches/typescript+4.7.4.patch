diff --git a/node_modules/typescript/lib/typescript.js b/node_modules/typescript/lib/typescript.js
index e8734a6..9165bd2 100644
--- a/node_modules/typescript/lib/typescript.js
+++ b/node_modules/typescript/lib/typescript.js
@@ -23,12 +23,59 @@ var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
     }
     return to.concat(ar || Array.prototype.slice.call(from));
 };
-var __assign = (this && this.__assign) || function () {
-    __assign = Object.assign || function(t) {
+var __assign = (this && this.__assign) || function() {
+    __assign = function(t) {
         for (var s, i = 1, n = arguments.length; i < n; i++) {
             s = arguments[i];
-            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
-                t[p] = s[p];
+            for (var p in s) {
+                if (Object.prototype.hasOwnProperty.call(s, p)) {
+                    /**
+                     * In the original version of this package, this was:
+                     *
+                     *     t[p] = s[p]
+                     *
+                     * Unfortunately LavaMoat trips up on this, so we have to change
+                     * it.
+                     *
+                     * Internally LavaMoat uses `lockdown` (part of SES, which is
+                     * part of Endo) to freeze modifications to "intrinsics" — core
+                     * things like `Object.prototype`, `Function.prototype`, etc.
+                     * This will cause code which is responsible for said
+                     * modifications to fail at runtime, because it makes the
+                     * properties of these intrinsics non-writable.
+                     *
+                     * The reason we have to change *this* code is that later on,
+                     * this `__assign` function is used to merge two objects, and
+                     * one of those objects contains a `constructor` property. As we
+                     * know, `constructor` is a special property, as it's a property
+                     * on `Object.prototype` that stores the constructor used to
+                     * create that object. But when used in this context, there is
+                     * nothing inherently special about it – it's just a property on
+                     * an object we're setting. Unfortunately, that's not how it's
+                     * being treated. Because `lockdown` freezes `Object.prototype`,
+                     * `Object.prototype.constructor` is non-writable, and due to a
+                     * "mistake" in the ES5 spec [1], that means `constructor` on
+                     * *any* object is non-writable too. So an error is thrown when
+                     * this code is executed.
+                     *
+                     * There is a way to get around this, which is to configure
+                     * `lockdown` with the option `overrideTaming: 'severe'`.
+                     * The mechanics of this option, as well as more information
+                     * about the "mistake" this option solves, are explained here
+                     * [2]. Unfortunately, we cannot enable this option because
+                     * LavaMoat is the one running `lockdown` here [3]. So to work
+                     * around this, we use `Object.defineProperty` to define the
+                     * property we want. As this does not use property assignment
+                     * (`object[key] = value`) but rather defines the property more
+                     * directly, this bypasses the "override mistake".
+                     *
+                     * [1]: https://web.archive.org/web/20141230041441/http://wiki.ecmascript.org/doku.php?id=strawman:fixing_override_mistake
+                     * [2]: https://github.com/endojs/endo/blob/864f086f87e1e7ef78a401a7550ff0aeb664bba0/packages/ses/src/enable-property-overrides.js#L28
+                     * [3]: https://github.com/LavaMoat/LavaMoat/blob/7c15bf8ba34ba1a9ceb3ffe591b1b2bfb084bead/packages/core/src/kernelTemplate.js#L32-L43
+                     */
+                    Object.defineProperty(t, p, Object.getOwnPropertyDescriptor(s, p))
+                }
+            }
         }
         return t;
     };
@@ -10069,89 +10116,96 @@ var ts;
     }
     ts.tokenIsIdentifierOrKeywordOrGreaterThan = tokenIsIdentifierOrKeywordOrGreaterThan;
     /** @internal */
-    ts.textToKeywordObj = (_a = {
-            abstract: 126 /* SyntaxKind.AbstractKeyword */,
-            any: 130 /* SyntaxKind.AnyKeyword */,
-            as: 127 /* SyntaxKind.AsKeyword */,
-            asserts: 128 /* SyntaxKind.AssertsKeyword */,
-            assert: 129 /* SyntaxKind.AssertKeyword */,
-            bigint: 158 /* SyntaxKind.BigIntKeyword */,
-            boolean: 133 /* SyntaxKind.BooleanKeyword */,
-            break: 81 /* SyntaxKind.BreakKeyword */,
-            case: 82 /* SyntaxKind.CaseKeyword */,
-            catch: 83 /* SyntaxKind.CatchKeyword */,
-            class: 84 /* SyntaxKind.ClassKeyword */,
-            continue: 86 /* SyntaxKind.ContinueKeyword */,
-            const: 85 /* SyntaxKind.ConstKeyword */
-        },
-        _a["" + "constructor"] = 134 /* SyntaxKind.ConstructorKeyword */,
-        _a.debugger = 87 /* SyntaxKind.DebuggerKeyword */,
-        _a.declare = 135 /* SyntaxKind.DeclareKeyword */,
-        _a.default = 88 /* SyntaxKind.DefaultKeyword */,
-        _a.delete = 89 /* SyntaxKind.DeleteKeyword */,
-        _a.do = 90 /* SyntaxKind.DoKeyword */,
-        _a.else = 91 /* SyntaxKind.ElseKeyword */,
-        _a.enum = 92 /* SyntaxKind.EnumKeyword */,
-        _a.export = 93 /* SyntaxKind.ExportKeyword */,
-        _a.extends = 94 /* SyntaxKind.ExtendsKeyword */,
-        _a.false = 95 /* SyntaxKind.FalseKeyword */,
-        _a.finally = 96 /* SyntaxKind.FinallyKeyword */,
-        _a.for = 97 /* SyntaxKind.ForKeyword */,
-        _a.from = 156 /* SyntaxKind.FromKeyword */,
-        _a.function = 98 /* SyntaxKind.FunctionKeyword */,
-        _a.get = 136 /* SyntaxKind.GetKeyword */,
-        _a.if = 99 /* SyntaxKind.IfKeyword */,
-        _a.implements = 117 /* SyntaxKind.ImplementsKeyword */,
-        _a.import = 100 /* SyntaxKind.ImportKeyword */,
-        _a.in = 101 /* SyntaxKind.InKeyword */,
-        _a.infer = 137 /* SyntaxKind.InferKeyword */,
-        _a.instanceof = 102 /* SyntaxKind.InstanceOfKeyword */,
-        _a.interface = 118 /* SyntaxKind.InterfaceKeyword */,
-        _a.intrinsic = 138 /* SyntaxKind.IntrinsicKeyword */,
-        _a.is = 139 /* SyntaxKind.IsKeyword */,
-        _a.keyof = 140 /* SyntaxKind.KeyOfKeyword */,
-        _a.let = 119 /* SyntaxKind.LetKeyword */,
-        _a.module = 141 /* SyntaxKind.ModuleKeyword */,
-        _a.namespace = 142 /* SyntaxKind.NamespaceKeyword */,
-        _a.never = 143 /* SyntaxKind.NeverKeyword */,
-        _a.new = 103 /* SyntaxKind.NewKeyword */,
-        _a.null = 104 /* SyntaxKind.NullKeyword */,
-        _a.number = 147 /* SyntaxKind.NumberKeyword */,
-        _a.object = 148 /* SyntaxKind.ObjectKeyword */,
-        _a.package = 120 /* SyntaxKind.PackageKeyword */,
-        _a.private = 121 /* SyntaxKind.PrivateKeyword */,
-        _a.protected = 122 /* SyntaxKind.ProtectedKeyword */,
-        _a.public = 123 /* SyntaxKind.PublicKeyword */,
-        _a.override = 159 /* SyntaxKind.OverrideKeyword */,
-        _a.out = 144 /* SyntaxKind.OutKeyword */,
-        _a.readonly = 145 /* SyntaxKind.ReadonlyKeyword */,
-        _a.require = 146 /* SyntaxKind.RequireKeyword */,
-        _a.global = 157 /* SyntaxKind.GlobalKeyword */,
-        _a.return = 105 /* SyntaxKind.ReturnKeyword */,
-        _a.set = 149 /* SyntaxKind.SetKeyword */,
-        _a.static = 124 /* SyntaxKind.StaticKeyword */,
-        _a.string = 150 /* SyntaxKind.StringKeyword */,
-        _a.super = 106 /* SyntaxKind.SuperKeyword */,
-        _a.switch = 107 /* SyntaxKind.SwitchKeyword */,
-        _a.symbol = 151 /* SyntaxKind.SymbolKeyword */,
-        _a.this = 108 /* SyntaxKind.ThisKeyword */,
-        _a.throw = 109 /* SyntaxKind.ThrowKeyword */,
-        _a.true = 110 /* SyntaxKind.TrueKeyword */,
-        _a.try = 111 /* SyntaxKind.TryKeyword */,
-        _a.type = 152 /* SyntaxKind.TypeKeyword */,
-        _a.typeof = 112 /* SyntaxKind.TypeOfKeyword */,
-        _a.undefined = 153 /* SyntaxKind.UndefinedKeyword */,
-        _a.unique = 154 /* SyntaxKind.UniqueKeyword */,
-        _a.unknown = 155 /* SyntaxKind.UnknownKeyword */,
-        _a.var = 113 /* SyntaxKind.VarKeyword */,
-        _a.void = 114 /* SyntaxKind.VoidKeyword */,
-        _a.while = 115 /* SyntaxKind.WhileKeyword */,
-        _a.with = 116 /* SyntaxKind.WithKeyword */,
-        _a.yield = 125 /* SyntaxKind.YieldKeyword */,
-        _a.async = 131 /* SyntaxKind.AsyncKeyword */,
-        _a.await = 132 /* SyntaxKind.AwaitKeyword */,
-        _a.of = 160 /* SyntaxKind.OfKeyword */,
-        _a);
+    /**
+     * In the original version of this package, this object was built by
+     * initializing one object and then adding more properties to that object.
+     * This ends up throwing an error when this code is executed due to
+     * the same issue as explained at the top of this file: essentially,
+     * the `constructor` property of any object cannot be set due to the
+     * "override mistake". The fix for this is to just build one big object.
+     */
+    ts.textToKeywordObj = {
+            abstract: 126 /* AbstractKeyword */,
+            any: 130 /* AnyKeyword */,
+            as: 127 /* AsKeyword */,
+            asserts: 128 /* AssertsKeyword */,
+            assert: 129 /* AssertKeyword */,
+            bigint: 158 /* BigIntKeyword */,
+            boolean: 133 /* BooleanKeyword */,
+            break: 81 /* BreakKeyword */,
+            case: 82 /* CaseKeyword */,
+            catch: 83 /* CatchKeyword */,
+            class: 84 /* ClassKeyword */,
+            continue: 86 /* ContinueKeyword */,
+            const: 85 /* ConstKeyword */,
+            ["constructor"]: 134 /* ConstructorKeyword */,
+            debugger: 87 /* DebuggerKeyword */,
+            declare: 135 /* DeclareKeyword */,
+            default: 88 /* DefaultKeyword */,
+            delete: 89 /* DeleteKeyword */,
+            do: 90 /* DoKeyword */,
+            else: 91 /* ElseKeyword */,
+            enum: 92 /* EnumKeyword */,
+            export: 93 /* ExportKeyword */,
+            extends: 94 /* ExtendsKeyword */,
+            false: 95 /* FalseKeyword */,
+            finally: 96 /* FinallyKeyword */,
+            for: 97 /* ForKeyword */,
+            from: 156 /* FromKeyword */,
+            function: 98 /* FunctionKeyword */,
+            get: 136 /* GetKeyword */,
+            if: 99 /* IfKeyword */,
+            implements: 117 /* ImplementsKeyword */,
+            import: 100 /* ImportKeyword */,
+            in: 101 /* InKeyword */,
+            infer: 137 /* InferKeyword */,
+            instanceof: 102 /* InstanceOfKeyword */,
+            interface: 118 /* InterfaceKeyword */,
+            intrinsic: 138 /* IntrinsicKeyword */,
+            is: 139 /* IsKeyword */,
+            keyof: 140 /* KeyOfKeyword */,
+            let: 119 /* LetKeyword */,
+            module: 141 /* ModuleKeyword */,
+            namespace: 142 /* NamespaceKeyword */,
+            never: 143 /* NeverKeyword */,
+            new: 103 /* NewKeyword */,
+            null: 104 /* NullKeyword */,
+            number: 147 /* NumberKeyword */,
+            object: 148 /* ObjectKeyword */,
+            package: 120 /* PackageKeyword */,
+            private: 121 /* PrivateKeyword */,
+            protected: 122 /* ProtectedKeyword */,
+            public: 123 /* PublicKeyword */,
+            override: 159 /* OverrideKeyword */,
+            out: 144 /* OutKeyword */,
+            readonly: 145 /* ReadonlyKeyword */,
+            require: 146 /* RequireKeyword */,
+            global: 157 /* GlobalKeyword */,
+            return: 105 /* ReturnKeyword */,
+            set: 149 /* SetKeyword */,
+            static: 124 /* StaticKeyword */,
+            string: 150 /* StringKeyword */,
+            super: 106 /* SuperKeyword */,
+            switch: 107 /* SwitchKeyword */,
+            symbol: 151 /* SymbolKeyword */,
+            this: 108 /* ThisKeyword */,
+            throw: 109 /* ThrowKeyword */,
+            true: 110 /* TrueKeyword */,
+            try: 111 /* TryKeyword */,
+            type: 152 /* TypeKeyword */,
+            typeof: 112 /* TypeOfKeyword */,
+            undefined: 153 /* UndefinedKeyword */,
+            unique: 154 /* UniqueKeyword */,
+            unknown: 155 /* UnknownKeyword */,
+            var: 113 /* VarKeyword */,
+            void: 114 /* VoidKeyword */,
+            while: 115 /* WhileKeyword */,
+            with: 116 /* WithKeyword */,
+            yield: 125 /* YieldKeyword */,
+            async: 131 /* AsyncKeyword */,
+            await: 132 /* AwaitKeyword */,
+            of: 160 /* OfKeyword */
+    };
     var textToKeyword = new ts.Map(ts.getEntries(ts.textToKeywordObj));
     var textToToken = new ts.Map(ts.getEntries(__assign(__assign({}, ts.textToKeywordObj), { "{": 18 /* SyntaxKind.OpenBraceToken */, "}": 19 /* SyntaxKind.CloseBraceToken */, "(": 20 /* SyntaxKind.OpenParenToken */, ")": 21 /* SyntaxKind.CloseParenToken */, "[": 22 /* SyntaxKind.OpenBracketToken */, "]": 23 /* SyntaxKind.CloseBracketToken */, ".": 24 /* SyntaxKind.DotToken */, "...": 25 /* SyntaxKind.DotDotDotToken */, ";": 26 /* SyntaxKind.SemicolonToken */, ",": 27 /* SyntaxKind.CommaToken */, "<": 29 /* SyntaxKind.LessThanToken */, ">": 31 /* SyntaxKind.GreaterThanToken */, "<=": 32 /* SyntaxKind.LessThanEqualsToken */, ">=": 33 /* SyntaxKind.GreaterThanEqualsToken */, "==": 34 /* SyntaxKind.EqualsEqualsToken */, "!=": 35 /* SyntaxKind.ExclamationEqualsToken */, "===": 36 /* SyntaxKind.EqualsEqualsEqualsToken */, "!==": 37 /* SyntaxKind.ExclamationEqualsEqualsToken */, "=>": 38 /* SyntaxKind.EqualsGreaterThanToken */, "+": 39 /* SyntaxKind.PlusToken */, "-": 40 /* SyntaxKind.MinusToken */, "**": 42 /* SyntaxKind.AsteriskAsteriskToken */, "*": 41 /* SyntaxKind.AsteriskToken */, "/": 43 /* SyntaxKind.SlashToken */, "%": 44 /* SyntaxKind.PercentToken */, "++": 45 /* SyntaxKind.PlusPlusToken */, "--": 46 /* SyntaxKind.MinusMinusToken */, "<<": 47 /* SyntaxKind.LessThanLessThanToken */, "</": 30 /* SyntaxKind.LessThanSlashToken */, ">>": 48 /* SyntaxKind.GreaterThanGreaterThanToken */, ">>>": 49 /* SyntaxKind.GreaterThanGreaterThanGreaterThanToken */, "&": 50 /* SyntaxKind.AmpersandToken */, "|": 51 /* SyntaxKind.BarToken */, "^": 52 /* SyntaxKind.CaretToken */, "!": 53 /* SyntaxKind.ExclamationToken */, "~": 54 /* SyntaxKind.TildeToken */, "&&": 55 /* SyntaxKind.AmpersandAmpersandToken */, "||": 56 /* SyntaxKind.BarBarToken */, "?": 57 /* SyntaxKind.QuestionToken */, "??": 60 /* SyntaxKind.QuestionQuestionToken */, "?.": 28 /* SyntaxKind.QuestionDotToken */, ":": 58 /* SyntaxKind.ColonToken */, "=": 63 /* SyntaxKind.EqualsToken */, "+=": 64 /* SyntaxKind.PlusEqualsToken */, "-=": 65 /* SyntaxKind.MinusEqualsToken */, "*=": 66 /* SyntaxKind.AsteriskEqualsToken */, "**=": 67 /* SyntaxKind.AsteriskAsteriskEqualsToken */, "/=": 68 /* SyntaxKind.SlashEqualsToken */, "%=": 69 /* SyntaxKind.PercentEqualsToken */, "<<=": 70 /* SyntaxKind.LessThanLessThanEqualsToken */, ">>=": 71 /* SyntaxKind.GreaterThanGreaterThanEqualsToken */, ">>>=": 72 /* SyntaxKind.GreaterThanGreaterThanGreaterThanEqualsToken */, "&=": 73 /* SyntaxKind.AmpersandEqualsToken */, "|=": 74 /* SyntaxKind.BarEqualsToken */, "^=": 78 /* SyntaxKind.CaretEqualsToken */, "||=": 75 /* SyntaxKind.BarBarEqualsToken */, "&&=": 76 /* SyntaxKind.AmpersandAmpersandEqualsToken */, "??=": 77 /* SyntaxKind.QuestionQuestionEqualsToken */, "@": 59 /* SyntaxKind.AtToken */, "#": 62 /* SyntaxKind.HashToken */, "`": 61 /* SyntaxKind.BacktickToken */ })));
     /*
