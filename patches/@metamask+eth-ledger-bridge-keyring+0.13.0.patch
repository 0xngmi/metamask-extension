diff --git a/node_modules/@metamask/eth-ledger-bridge-keyring/index.js b/node_modules/@metamask/eth-ledger-bridge-keyring/index.js
index 2c6a7de..5ddd81e 100644
--- a/node_modules/@metamask/eth-ledger-bridge-keyring/index.js
+++ b/node_modules/@metamask/eth-ledger-bridge-keyring/index.js
@@ -37,26 +37,48 @@ class LedgerBridgeKeyring extends EventEmitter {
     this.deserialize(opts)
 
     this.iframeLoaded = false
-    this._setupIframe()
-
     this.currentMessageId = 0
     this.messageCallbacks = {}
+
+    if(!opts.delayInit){
+      this.init();
+    }
+  }
+
+  init(opts){
+    this._setupIframe()
     this._setupListener()
+
+    return this.updateTransportMethod('webhid');
   }
 
   serialize () {
     return Promise.resolve({
+      hdk: this.isUnlocked() ? {
+        publicKey: this.hdk.publicKey.toString('hex'),
+        chainCode: this.hdk.chainCode.toString('hex'),
+      } : null,
       hdPath: this.hdPath,
       accounts: this.accounts,
+      page: this.page,
       accountDetails: this.accountDetails,
       bridgeUrl: this.bridgeUrl,
       implementFullBIP44: false,
+      unlockedAccount: this.unlockedAccount,
     })
   }
 
   deserialize (opts = {}) {
+    console.log('Updating ledger state', opts);
+
+    if(opts.hdk){
+      this.setHdk(opts.hdk);
+    }
+
     this.hdPath = opts.hdPath || hdPathString
+    this.page = opts.page || 0
     this.bridgeUrl = opts.bridgeUrl || BRIDGE_URL
+    this.unlockedAccount = opts.unlockedAccount || 0;
     this.accounts = opts.accounts || []
     this.accountDetails = opts.accountDetails || {}
     if (!opts.accountDetails) {
@@ -99,6 +121,11 @@ class LedgerBridgeKeyring extends EventEmitter {
     }
   }
 
+  setHdk ({ publicKey, chainCode }) {
+    this.hdk.publicKey = Buffer.from(publicKey, 'hex')
+    this.hdk.chainCode = Buffer.from(chainCode, 'hex')
+  }
+
   isUnlocked () {
     return Boolean(this.hdk && this.hdk.publicKey)
   }
@@ -120,7 +147,7 @@ class LedgerBridgeKeyring extends EventEmitter {
   }
 
   unlock (hdPath, updateHdk = true) {
-    if (this.isUnlocked() && !hdPath) {
+    if (this.isUnlocked() && !updateHdk) {
       return Promise.resolve('already unlocked')
     }
     const path = hdPath ? this._toLedgerPath(hdPath) : this.hdPath
@@ -133,10 +160,7 @@ class LedgerBridgeKeyring extends EventEmitter {
       },
       ({ success, payload }) => {
         if (success) {
-          if (updateHdk) {
-            this.hdk.publicKey = Buffer.from(payload.publicKey, 'hex')
-            this.hdk.chainCode = Buffer.from(payload.chainCode, 'hex')
-          }
+          this.setHdk(payload);
           resolve(payload.address)
         } else {
           reject(payload.error || new Error('Unknown error'))
@@ -235,6 +259,7 @@ class LedgerBridgeKeyring extends EventEmitter {
         params: { transportType },
       }, ({ success }) => {
         if (success) {
+          console.log(`Ledger transport method updated to ${transportType}`);
           resolve(true)
         } else {
           reject(new Error('Ledger transport could not be updated'))
@@ -348,6 +373,7 @@ class LedgerBridgeKeyring extends EventEmitter {
             },
           },
           ({ success, payload }) => {
+
             if (success) {
               let v = payload.v - 27
               v = v.toString(16)
